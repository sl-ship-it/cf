/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.currencyfair.codechallenge.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.currencyfair.codechallenge.model.Order;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-11-08T08:41:09.652Z[GMT]")
public interface OrderApi {

    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "list of order payloads", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Order.class)))),
        
        @ApiResponse(responseCode = "200", description = "error payload", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/order",
        produces = { "application/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Order>> orderGet();


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "list of order payloads", content = @Content(schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "200", description = "error payload", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/order/{orderId}",
        produces = { "application/json", "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> orderOrderIdGet(@Parameter(in = ParameterIn.PATH, description = "the user identifier, as userId", required=true, schema=@Schema()) @PathVariable("orderId") String orderId);


    @Operation(summary = "", description = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "The order created successfully"),
        
        @ApiResponse(responseCode = "200", description = "error payload", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/order",
        produces = { "text/html" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> orderPost(@Parameter(in = ParameterIn.DEFAULT, description = "Order Creation Payload", schema=@Schema()) @Valid @RequestBody Order body);

}

